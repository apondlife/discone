#!/bin/sh

# run this script from the project root; a portable way of getting
# a script's path is hard to come by, so we assume .env is in the cwd

# -- includes --
. bin/prelude

# -- props --
# the variant (e.g. playtest, release) if any; defaults to release
VARIANT=""

# the target (e.g. mac, win, win-server) if any; defaults to all
TARGET=""

# if this should skip the git status check
SKIPS_STATUS_CHECK=""

# if this is a dry run
DEBUG=""

# -- parsing --
Usage() {
  pu "[-hsd] [-v <variant>] [-t <target>]"
}

while getopts ":hsdv:t:" option; do
  case "${option}" in
    h*) Usage ;;
    s*) SKIPS_STATUS_CHECK="1" ;;
    d*) DEBUG="1" ;;
    v*) VARIANT="$OPTARG" ;;
    t*) TARGET="$OPTARG" ;;
  esac
done

# -- commands --
# create .env in missing
CreateEnv() {
  if [ ! -f .env ]; then
    if [ ! -f .env.sample ]; then
      pe "you need a .env (and a .env.sample to create it from)"
      pi "run this script from the project root, e.g."
      pl "> ./bin/build"
      exit 2
    fi

    pi "creating .env from .env.sample; fill it out and try again"
    cp .env.sample .env

    exit 3
  fi
}

# build the targets
Build() {
  pl "starting build (see: Assets/Editor/Builds/BuildAll.cs)"
  pl "~*~ ~*~ ~*~"

  # os-specific options
  case "$OS" in
    mac) opts="-logFile - " ;;
    win) opts="-logFile - stdout" ;;
  esac

  # unless dry run...
  if [ -n "$DEBUG" ]; then
    pd "dry run, skip build"
  # run the build script
  else
    "$UNITY_PATH" \
      -quit \
      -batchmode \
      -projectPath . \
      $opts \
      -executeMethod Builds.BuildAll.Main \
      -- \
      --variant "$VARIANT" \
      --target "$TARGET"
  fi

  ps "build complete"
}

# -- main --
Main() {
  FindOs

  # create or load env
  CreateEnv
  LoadEnv

  # validate env
  if [ ! -f "$UNITY_PATH" ]; then
    pf 4 "unity (.env->UNITY_PATH) does not exist at '$UNITY_PATH'"
  fi

  if ps x | grep -v grep | grep "$UNITY_PATH -projectpath .*discone" > /dev/null; then
    pf 5 "unity is running! the build script can't run when unity is open"
  fi

  if [ -z "$SKIPS_STATUS_CHECK" ] && [ -n "$(git status --porcelain)" ]; then
    pf 6 "there are uncommitted changes! this could lead to an unstable build: please commit, stash, &c."
  fi

  # run build
  Build
}

Main "$*"
