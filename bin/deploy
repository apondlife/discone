#!/bin/sh
# run this script from the project root; a portable way of getting
# a script's path is hard to come by, so we assume .env is in the cwd

# -- includes --
. bin/prelude

# -- constants --
# the path of the game on itch (sans target)
ITCH_PROJECT="withpondlife/discone"

# the path to the version file
VERSION_PATH="VERSION"

# -- props --
# the variant (e.g. playtest, release) if any; defaults to release
VARIANT=""

# if this should skip the git status check
SKIPS_STATUS_CHECK=""

# if this is a dry run
DEBUG=""

# -- parsing --
Usage() {
  pu "[-hsd] [-v <variant>]"
}

while getopts ":hsd" option; do
  case "${option}" in
    s*) SKIPS_STATUS_CHECK="1" ;;
    d*) DEBUG="1" ;;
    h*) Usage ;;
  esac
done

# -- commands --
# check if the tag already exists
CheckTag() {
  TAG_NAME="v$(cat $VERSION_PATH)"

  tag_remote=$(git ls-remote origin refs/tags/"$TAG_NAME")
  if [ -n "$tag_remote" ]; then
    pf 3 "remote tag ($TAG_NAME) already exists. did you bump the version @ $VERSION_PATH?"
  fi
}

# tag the current commit
Tag() {
  # unless dry run...
  if [ -n "$DEBUG" ]; then
    pd "dry run, skip tag"
  # create the tag
  else
    git tag "$TAG_NAME"
    git push origin "$TAG_NAME"
  fi

  pi "tag  ${bd}$TAG_NAME${nc}"
}

# deploy each build in the dir at path; assumes the child name is the butler target name
Deploy() {
  # the absolute path to the version file
  version_path=$(realpath $VERSION_PATH)

  # switch to the build dir
  cd "$BUILD" || exit 99

  # tag project with variant, unless release
  project="$ITCH_PROJECT"
  if [ "$VARIANT" != "$VARIANT_RELEASE" ]; then
    project="-$VARIANT"
  fi

  # for each target
  for target in *; do
    pi "push $target -> itch [$project:$target]"

    # push the build, unless dry run
    if [ -n "$DEBUG" ]; then
      pd "dry run, skip deploy"
    else
      "$BUTLER_PATH" push \
        "$target" \
        "$project:$target" \
        "--userversion-file=$version_path"
    fi
  done

  ps "deployed"
}

# -- main --
Main() {
  # load env
  LoadEnv

  # validate env
  if [ ! -f "$BUTLER_PATH" ]; then
    pf 2 "butler (.env->BUTLER_PATH) does not exist at '$BUTLER_PATH'"
  fi

  if [ -z "$SKIPS_STATUS_CHECK" ] && [ -n "$(git status --porcelain)" ]; then
    pf 3 "there are uncommitted changes! this could lead to an unstable deploy: please commit, stash, &c."
  fi

  # validate args
  if [ -z "$VARIANT" ]; then
    VARIANT="$VARIANT_RELEASE"
  fi

  # find build
  FindBuild "$VARIANT"

  # run deploy
  CheckTag
  Deploy
  Tag
}

Main "$*"