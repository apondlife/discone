#!/bin/sh
# run this script from the project root; a portable way of getting
# a script's path is hard to come by, so we assume .env is in the cwd

# -- includes --
. bin/prelude

# -- constants --
# the path of the game on itch (sans target)
ITCH_PROJECT="withpondlife/discone"

# the path to the version file
VERSION_PATH="VERSION"

# -- props --
# the variant (e.g. playtest, release) if any; defaults to release
VARIANT=""

# -- parsing --
Usage() {
  pu "[-h] [-v <variant>]"
}

while getopts ":h" option; do
  case "${option}" in
    h*) Usage ;;
  esac
done

# -- commands --
# validate and tag the current commit
Tag() {
  tag_name="v$(cat $VERSION_PATH)"

  # ensure this tag doesn't exist
  tag_remote=$(git ls-remote origin refs/tags/"$tag_name")
  if [ -n "$tag_remote" ]; then
    pf 3 "remote tag ($tag_name) already exists. did you bump the version @ $VERSION_PATH?"
  fi

  # create the tag
  git tag "$tag_name"
  git push origin "$tag_name"

  pi "tag  ${bd}$tag_name${nc}"
}

# deploy each build in the dir at path; assumes the child name is the butler
# target name
Deploy() {
  # the absolute path to the version file
  version_path=$(realpath $VERSION_PATH)

  # switch to the build dir
  cd "$BUILD" || exit 99

  # tag project with variant, unless release
  project="$ITCH_PROJECT"
  if [ "$VARIANT" != "$VARIANT_RELEASE" ]; then
    project="-$VARIANT"
  fi

  # push butler build
  for target in *; do
    pi "push $target -> itch [$project:$target]"

    "$BUTLER_PATH" push \
      "$target" \
      "$project:$target" \
      "--userversion-file=$version_path"
  done

  ps "deployed"
}

# -- main --
Main() {
  # load env
  LoadEnv

  # validate env
  if [ ! -f "$BUTLER_PATH" ]; then
    pf 2 "butler (.env->BUTLER_PATH) does not exist at '$BUTLER_PATH'"
  fi

  if [ -n "$(git status --porcelain)" ]; then
    pf 3 "there are uncommitted changes! this could lead to an unstable deploy: please commit, stash, &c."
  fi

  # validate args
  if [ -z "$VARIANT" ]; then
    VARIANT="$VARIANT_RELEASE"
  fi

  # find build
  FindBuild "$VARIANT"

  # run deploy
  Tag
  Deploy
}

Main "$*"
